// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ios/ios.proto

/*
Package ios is a generated protocol buffer package.

It is generated from these files:
	ios/ios.proto

It has these top-level messages:
	LoginRequest
	LoginReply
	PurchaseRequest
	PurchaseReply
	GetConfigRequest
	GetConfigReply
*/
package ios

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LoginRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LoginRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type LoginReply struct {
	Token       string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	ExpiresDate int64  `protobuf:"varint,2,opt,name=expiresDate" json:"expiresDate,omitempty"`
}

func (m *LoginReply) Reset()                    { *m = LoginReply{} }
func (m *LoginReply) String() string            { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()               {}
func (*LoginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LoginReply) GetExpiresDate() int64 {
	if m != nil {
		return m.ExpiresDate
	}
	return 0
}

type PurchaseRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *PurchaseRequest) Reset()                    { *m = PurchaseRequest{} }
func (m *PurchaseRequest) String() string            { return proto.CompactTextString(m) }
func (*PurchaseRequest) ProtoMessage()               {}
func (*PurchaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PurchaseRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *PurchaseRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type PurchaseReply struct {
	ExpiresDate int64 `protobuf:"varint,1,opt,name=expiresDate" json:"expiresDate,omitempty"`
}

func (m *PurchaseReply) Reset()                    { *m = PurchaseReply{} }
func (m *PurchaseReply) String() string            { return proto.CompactTextString(m) }
func (*PurchaseReply) ProtoMessage()               {}
func (*PurchaseReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PurchaseReply) GetExpiresDate() int64 {
	if m != nil {
		return m.ExpiresDate
	}
	return 0
}

type GetConfigRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *GetConfigRequest) Reset()                    { *m = GetConfigRequest{} }
func (m *GetConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*GetConfigRequest) ProtoMessage()               {}
func (*GetConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetConfigRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type GetConfigReply struct {
	IP          string `protobuf:"bytes,1,opt,name=IP" json:"IP,omitempty"`
	Port        string `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
	Method      string `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	Passwd      string `protobuf:"bytes,4,opt,name=passwd" json:"passwd,omitempty"`
	ExpiresDate int64  `protobuf:"varint,5,opt,name=expiresDate" json:"expiresDate,omitempty"`
}

func (m *GetConfigReply) Reset()                    { *m = GetConfigReply{} }
func (m *GetConfigReply) String() string            { return proto.CompactTextString(m) }
func (*GetConfigReply) ProtoMessage()               {}
func (*GetConfigReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetConfigReply) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *GetConfigReply) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *GetConfigReply) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *GetConfigReply) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *GetConfigReply) GetExpiresDate() int64 {
	if m != nil {
		return m.ExpiresDate
	}
	return 0
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "ios.LoginRequest")
	proto.RegisterType((*LoginReply)(nil), "ios.LoginReply")
	proto.RegisterType((*PurchaseRequest)(nil), "ios.PurchaseRequest")
	proto.RegisterType((*PurchaseReply)(nil), "ios.PurchaseReply")
	proto.RegisterType((*GetConfigRequest)(nil), "ios.GetConfigRequest")
	proto.RegisterType((*GetConfigReply)(nil), "ios.GetConfigReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IOS service

type IOSClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	Purchase(ctx context.Context, in *PurchaseRequest, opts ...grpc.CallOption) (*PurchaseReply, error)
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigReply, error)
}

type iOSClient struct {
	cc *grpc.ClientConn
}

func NewIOSClient(cc *grpc.ClientConn) IOSClient {
	return &iOSClient{cc}
}

func (c *iOSClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/ios.IOS/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOSClient) Purchase(ctx context.Context, in *PurchaseRequest, opts ...grpc.CallOption) (*PurchaseReply, error) {
	out := new(PurchaseReply)
	err := grpc.Invoke(ctx, "/ios.IOS/Purchase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOSClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigReply, error) {
	out := new(GetConfigReply)
	err := grpc.Invoke(ctx, "/ios.IOS/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IOS service

type IOSServer interface {
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	Purchase(context.Context, *PurchaseRequest) (*PurchaseReply, error)
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigReply, error)
}

func RegisterIOSServer(s *grpc.Server, srv IOSServer) {
	s.RegisterService(&_IOS_serviceDesc, srv)
}

func _IOS_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOSServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ios.IOS/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOSServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOS_Purchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOSServer).Purchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ios.IOS/Purchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOSServer).Purchase(ctx, req.(*PurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOS_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOSServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ios.IOS/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOSServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IOS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ios.IOS",
	HandlerType: (*IOSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _IOS_Login_Handler,
		},
		{
			MethodName: "Purchase",
			Handler:    _IOS_Purchase_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _IOS_GetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ios/ios.proto",
}

func init() { proto.RegisterFile("ios/ios.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xc1, 0xae, 0xd2, 0x40,
	0x14, 0xcd, 0xb4, 0x8f, 0x17, 0xb9, 0x0a, 0x0f, 0x07, 0x30, 0xb5, 0x1a, 0xd3, 0xcc, 0x8a, 0x90,
	0x48, 0x29, 0xac, 0x64, 0xa9, 0x18, 0x43, 0x62, 0x22, 0xd6, 0x9d, 0xbb, 0x81, 0x8e, 0x65, 0x62,
	0xe9, 0x8c, 0x9d, 0xa9, 0xca, 0xd6, 0x85, 0x3f, 0xe0, 0xa7, 0xf9, 0x0b, 0xfe, 0x81, 0x3f, 0x60,
	0x66, 0x68, 0xb5, 0x29, 0xe6, 0xed, 0xe6, 0x9e, 0x7b, 0xee, 0xb9, 0x27, 0xe7, 0x0e, 0xf4, 0xb8,
	0x50, 0x21, 0x17, 0x6a, 0x26, 0x0b, 0xa1, 0x05, 0x76, 0xb9, 0x50, 0xfe, 0xe3, 0x54, 0x88, 0x34,
	0x63, 0x21, 0x95, 0x3c, 0xa4, 0x79, 0x2e, 0x34, 0xd5, 0x5c, 0xe4, 0x15, 0x85, 0x10, 0xb8, 0xf7,
	0x5a, 0xa4, 0x3c, 0x8f, 0xd9, 0xa7, 0x92, 0x29, 0x8d, 0x31, 0x5c, 0x95, 0x25, 0x4f, 0x3c, 0x14,
	0xa0, 0x49, 0x37, 0xb6, 0x6f, 0xb2, 0x06, 0xa8, 0x38, 0x32, 0x3b, 0xe1, 0x11, 0x74, 0xb4, 0xf8,
	0xc8, 0xf2, 0x8a, 0x72, 0x2e, 0x70, 0x00, 0x77, 0xd9, 0x57, 0xc9, 0x0b, 0xa6, 0xd6, 0x54, 0x33,
	0xcf, 0x09, 0xd0, 0xc4, 0x8d, 0x9b, 0x10, 0x79, 0x06, 0x37, 0xdb, 0xb2, 0xd8, 0x1f, 0xa8, 0x62,
	0xb7, 0x2c, 0x33, 0x58, 0x42, 0x35, 0xb5, 0x0a, 0xdd, 0xd8, 0xbe, 0x49, 0x04, 0xbd, 0x7f, 0xa3,
	0xc6, 0x43, 0x6b, 0x1b, 0xba, 0xdc, 0x36, 0x81, 0xc1, 0x2b, 0xa6, 0x5f, 0x88, 0xfc, 0x03, 0x4f,
	0xeb, 0x75, 0xff, 0x75, 0x4e, 0xbe, 0x23, 0xe8, 0x37, 0xa8, 0x46, 0xbe, 0x0f, 0xce, 0x66, 0x5b,
	0xb1, 0x9c, 0xcd, 0xd6, 0x78, 0x92, 0xa2, 0xd0, 0xb5, 0x27, 0xf3, 0xc6, 0x0f, 0xe0, 0xfa, 0xc8,
	0xf4, 0x41, 0x24, 0x9e, 0x6b, 0xd1, 0xaa, 0x32, 0xb8, 0xa4, 0x4a, 0x7d, 0x49, 0xbc, 0xab, 0x33,
	0x7e, 0xae, 0xda, 0x96, 0x3b, 0x17, 0x96, 0x17, 0xbf, 0x11, 0xb8, 0x9b, 0x37, 0xef, 0xf0, 0x4b,
	0xe8, 0xd8, 0xb8, 0xf1, 0xfd, 0x99, 0x39, 0x65, 0xf3, 0x3c, 0xfe, 0x4d, 0x13, 0x92, 0xd9, 0x89,
	0x78, 0xdf, 0x7e, 0xfe, 0xfa, 0xe1, 0x60, 0xd2, 0x0b, 0x3f, 0x47, 0xe6, 0xf2, 0x61, 0x66, 0x7a,
	0x2b, 0x34, 0xc5, 0x6f, 0xe1, 0x4e, 0x1d, 0x1a, 0x1e, 0xd9, 0xb1, 0x56, 0xfc, 0x3e, 0x6e, 0xa1,
	0x46, 0xef, 0x91, 0xd5, 0x1b, 0x93, 0x41, 0xad, 0x27, 0xab, 0xb6, 0x91, 0x8c, 0xa1, 0xfb, 0x37,
	0x29, 0x3c, 0xb6, 0xd3, 0xed, 0x90, 0xfd, 0x61, 0x1b, 0x36, 0xaa, 0x0f, 0xad, 0xea, 0x90, 0xf4,
	0x6b, 0xd5, 0xbd, 0x6d, 0xae, 0xd0, 0xf4, 0x79, 0xf0, 0xfe, 0x49, 0xca, 0xf5, 0xa1, 0xdc, 0xcd,
	0xf6, 0xe2, 0x18, 0x96, 0xf3, 0xe5, 0x3c, 0x5a, 0x46, 0xd1, 0x22, 0x54, 0xea, 0xa9, 0xdc, 0x19,
	0xee, 0xee, 0xda, 0xfe, 0xd4, 0xe5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x95, 0x1e, 0x51,
	0xdd, 0x02, 0x00, 0x00,
}
