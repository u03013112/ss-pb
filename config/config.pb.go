// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config/config.proto

/*
Package config is a generated protocol buffer package.

It is generated from these files:
	config/config.proto

It has these top-level messages:
	TestRequest
	TestReply
	GetSSConfigRequest
	GetSSConfigReply
*/
package config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TestRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *TestRequest) Reset()                    { *m = TestRequest{} }
func (m *TestRequest) String() string            { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()               {}
func (*TestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TestRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TestReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *TestReply) Reset()                    { *m = TestReply{} }
func (m *TestReply) String() string            { return proto.CompactTextString(m) }
func (*TestReply) ProtoMessage()               {}
func (*TestReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TestReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetSSConfigRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *GetSSConfigRequest) Reset()                    { *m = GetSSConfigRequest{} }
func (m *GetSSConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSSConfigRequest) ProtoMessage()               {}
func (*GetSSConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetSSConfigRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type GetSSConfigReply struct {
	IP     string `protobuf:"bytes,1,opt,name=IP" json:"IP,omitempty"`
	Port   string `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
	Method string `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	Passwd string `protobuf:"bytes,4,opt,name=passwd" json:"passwd,omitempty"`
}

func (m *GetSSConfigReply) Reset()                    { *m = GetSSConfigReply{} }
func (m *GetSSConfigReply) String() string            { return proto.CompactTextString(m) }
func (*GetSSConfigReply) ProtoMessage()               {}
func (*GetSSConfigReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetSSConfigReply) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *GetSSConfigReply) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *GetSSConfigReply) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *GetSSConfigReply) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func init() {
	proto.RegisterType((*TestRequest)(nil), "config.TestRequest")
	proto.RegisterType((*TestReply)(nil), "config.TestReply")
	proto.RegisterType((*GetSSConfigRequest)(nil), "config.GetSSConfigRequest")
	proto.RegisterType((*GetSSConfigReply)(nil), "config.GetSSConfigReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SSConfig service

type SSConfigClient interface {
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error)
	GetSSConfig(ctx context.Context, in *GetSSConfigRequest, opts ...grpc.CallOption) (*GetSSConfigReply, error)
}

type sSConfigClient struct {
	cc *grpc.ClientConn
}

func NewSSConfigClient(cc *grpc.ClientConn) SSConfigClient {
	return &sSConfigClient{cc}
}

func (c *sSConfigClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error) {
	out := new(TestReply)
	err := grpc.Invoke(ctx, "/config.SSConfig/Test", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSConfigClient) GetSSConfig(ctx context.Context, in *GetSSConfigRequest, opts ...grpc.CallOption) (*GetSSConfigReply, error) {
	out := new(GetSSConfigReply)
	err := grpc.Invoke(ctx, "/config.SSConfig/GetSSConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SSConfig service

type SSConfigServer interface {
	Test(context.Context, *TestRequest) (*TestReply, error)
	GetSSConfig(context.Context, *GetSSConfigRequest) (*GetSSConfigReply, error)
}

func RegisterSSConfigServer(s *grpc.Server, srv SSConfigServer) {
	s.RegisterService(&_SSConfig_serviceDesc, srv)
}

func _SSConfig_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSConfigServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.SSConfig/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSConfigServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSConfig_GetSSConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSSConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSConfigServer).GetSSConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.SSConfig/GetSSConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSConfigServer).GetSSConfig(ctx, req.(*GetSSConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SSConfig_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.SSConfig",
	HandlerType: (*SSConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _SSConfig_Test_Handler,
		},
		{
			MethodName: "GetSSConfig",
			Handler:    _SSConfig_GetSSConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/config.proto",
}

func init() { proto.RegisterFile("config/config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xcd, 0x4e, 0xc2, 0x40,
	0x10, 0x4e, 0x2b, 0xa2, 0x0c, 0x89, 0x3f, 0x0b, 0x9a, 0xa6, 0xf1, 0x00, 0x6b, 0x4c, 0x0c, 0x09,
	0x2c, 0x85, 0x1b, 0x47, 0x3d, 0x18, 0x3c, 0x11, 0xf0, 0xe4, 0xad, 0xc0, 0x50, 0x1a, 0x69, 0x77,
	0x65, 0x07, 0x0d, 0x57, 0x5f, 0xc1, 0xe7, 0xf1, 0x29, 0x7c, 0x05, 0x1f, 0xc4, 0xb4, 0xbb, 0x4d,
	0x20, 0x7a, 0xea, 0x7c, 0x5f, 0xbf, 0x99, 0x6f, 0xe6, 0x5b, 0xa8, 0xcd, 0x64, 0xba, 0x88, 0x23,
	0x61, 0x3e, 0x1d, 0xb5, 0x96, 0x24, 0x59, 0xd9, 0x20, 0xff, 0x2a, 0x92, 0x32, 0x5a, 0xa1, 0x08,
	0x55, 0x2c, 0xc2, 0x34, 0x95, 0x14, 0x52, 0x2c, 0x53, 0x6d, 0x54, 0xbc, 0x09, 0xd5, 0x27, 0xd4,
	0x34, 0xc6, 0xd7, 0x0d, 0x6a, 0x62, 0x0c, 0x4a, 0x69, 0x98, 0xa0, 0xe7, 0x34, 0x9c, 0xdb, 0xca,
	0x38, 0xaf, 0xf9, 0x0d, 0x54, 0x8c, 0x44, 0xad, 0xb6, 0xcc, 0x83, 0xa3, 0x04, 0xb5, 0x0e, 0xa3,
	0x42, 0x53, 0x40, 0xde, 0x02, 0xf6, 0x80, 0x34, 0x99, 0xdc, 0xe7, 0xb6, 0xc5, 0xc0, 0x3a, 0x1c,
	0x92, 0x7c, 0xc1, 0xd4, 0xaa, 0x0d, 0xe0, 0x0b, 0x38, 0xdb, 0xd3, 0x66, 0x93, 0x4f, 0xc0, 0x1d,
	0x8e, 0xac, 0xcc, 0x1d, 0x8e, 0xb2, 0x55, 0x94, 0x5c, 0x93, 0xe7, 0x9a, 0x55, 0xb2, 0x9a, 0x5d,
	0x42, 0x39, 0x41, 0x5a, 0xca, 0xb9, 0x77, 0x90, 0xb3, 0x16, 0x65, 0xbc, 0x0a, 0xb5, 0x7e, 0x9f,
	0x7b, 0x25, 0xc3, 0x1b, 0xd4, 0xfb, 0x72, 0xe0, 0xb8, 0x70, 0x61, 0x8f, 0x50, 0xca, 0xee, 0x60,
	0xb5, 0x8e, 0xcd, 0x69, 0xe7, 0x70, 0xff, 0x7c, 0x9f, 0x54, 0xab, 0x2d, 0xf7, 0x3f, 0xbe, 0x7f,
	0x3e, 0xdd, 0x3a, 0x3f, 0x15, 0x6f, 0x81, 0x8d, 0x56, 0x10, 0x6a, 0x1a, 0x38, 0x2d, 0x86, 0x50,
	0xdd, 0x39, 0x80, 0xf9, 0x45, 0xf7, 0xdf, 0x04, 0x7c, 0xef, 0xdf, 0x7f, 0x99, 0x41, 0x23, 0x37,
	0xf0, 0xf9, 0xc5, 0x8e, 0x41, 0x84, 0xd4, 0x36, 0xe5, 0xc0, 0x69, 0xdd, 0x5d, 0x3f, 0x37, 0xa3,
	0x98, 0x96, 0x9b, 0x69, 0x67, 0x26, 0x13, 0xb1, 0xe9, 0xf6, 0xbb, 0x41, 0x3f, 0x08, 0x7a, 0x42,
	0xeb, 0xb6, 0x9a, 0xda, 0x96, 0x69, 0x39, 0x7f, 0xc9, 0xfe, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x48, 0x35, 0xac, 0x0b, 0x06, 0x02, 0x00, 0x00,
}
